[
  {
    "tags": [],
    "description": {
      "full": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p><p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>",
      "summary": "<p>Copyright 2015 Google Inc. All Rights Reserved.</p>",
      "body": "<p>Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);<br />you may not use this file except in compliance with the License.<br />You may obtain a copy of the License at</p><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n</code></pre><p>Unless required by applicable law or agreed to in writing, software<br />distributed under the License is distributed on an &quot;AS IS&quot; BASIS,<br />WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.<br />See the License for the specific language governing permissions and<br />limitations under the License.</p>"
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 1,
    "codeStart": 16
  },
  {
    "tags": [
      {
        "type": "module",
        "string": "search/field",
        "html": "<p>search/field</p>"
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": true,
    "line": 17,
    "codeStart": 21,
    "code": "'use strict';",
    "ctx": false
  },
  {
    "tags": [
      {
        "type": "type",
        "string": "{module:common/util}",
        "types": [
          "module:common/util"
        ],
        "typesDescription": "module:<a href=\"module%3Acommon%2Futil.html\">common/util</a>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false,
        "html": "<p>{module:common/util}</p>"
      },
      {
        "type": "private",
        "string": "",
        "visibility": "private",
        "html": ""
      }
    ],
    "description": {
      "full": "",
      "summary": "",
      "body": ""
    },
    "isPrivate": true,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 23,
    "codeStart": 27,
    "code": "var util = require('../common/util.js');",
    "ctx": {
      "type": "declaration",
      "name": "util",
      "value": "require('../common/util.js')",
      "string": "util"
    }
  },
  {
    "tags": [
      {
        "type": "constructor",
        "string": "",
        "html": ""
      },
      {
        "type": "alias",
        "string": "module:search/field ",
        "html": "<p>module:search/field </p>"
      },
      {
        "type": "example",
        "string": "var gcloud = require('gcloud');\n\nvar search = gcloud.search({\n  projectId: 'grape-spaceship-123'\n});\n\nvar document = search.index('records').document('stephen');\nvar field = document.addField('alias');",
        "html": "<p>var gcloud = require(&#39;gcloud&#39;);</p><p>var search = gcloud.search({<br />  projectId: &#39;grape-spaceship-123&#39;<br />});</p><p>var document = search.index(&#39;records&#39;).document(&#39;stephen&#39;);<br />var field = document.addField(&#39;alias&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>Create a Field object to easily format a Cloud Search index&#39;s field.</p>",
      "summary": "<p>Create a Field object to easily format a Cloud Search index&#39;s field.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": true,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 29,
    "codeStart": 45,
    "code": "function Field() {\n  this.values = [];\n}",
    "ctx": {
      "type": "constructor",
      "name": "Field",
      "string": "Field()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} atom - String value.\n",
        "name": "atom",
        "description": "<ul>\n<li>String value. </li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "field.addAtomValue('ryanseys');",
        "html": "<p>field.addAtomValue(&#39;ryanseys&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>An atom value is a string value that is treated as a single token. A query<br />will not match if it includes only a substring rather than the full field<br />value.</p>",
      "summary": "<p>An atom value is a string value that is treated as a single token. A query<br />will not match if it includes only a substring rather than the full field<br />value.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 49,
    "codeStart": 59,
    "code": "Field.prototype.addAtomValue = function(atom) {\n  this.addTextValue(atom, { format: 'ATOM' });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Field",
      "cons": "Field",
      "name": "addAtomValue",
      "string": "Field.prototype.addAtomValue()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|object} geo - Coordinate value as a string or object. String\n    format: `'40.6894, -74.0447'`.",
        "name": "geo",
        "description": "<ul>\n<li>Coordinate value as a string or object. String     format: <code>&#39;40.6894, -74.0447&#39;</code>.</li>\n</ul>\n",
        "types": [
          "string",
          "object"
        ],
        "typesDescription": "<code>string</code>|<code>object</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} geo.latitude - Latitudinal value.",
        "name": "geo.latitude",
        "description": "<ul>\n<li>Latitudinal value.</li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{number} geo.longitude - Longitudinal value.\n",
        "name": "geo.longitude",
        "description": "<ul>\n<li>Longitudinal value. </li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var coordinates = '40.6894, -74.0447';\nfield.addGeoValue(coordinates);\n\n//-\n// Use an object.\n//-\nvar coordinates = {\n  latitude: 40.6894,\n  longitude: -74.0447\n};\n\nfield.addGeoValue(coordinates);",
        "html": "<p>var coordinates = &#39;40.6894, -74.0447&#39;;<br />field.addGeoValue(coordinates);</p><p>//-<br />// Use an object.<br />//-<br />var coordinates = {<br />  latitude: 40.6894,<br />  longitude: -74.0447<br />};</p><p>field.addGeoValue(coordinates);</p>"
      }
    ],
    "description": {
      "full": "<p>A geo value is a point on earth with latitude and longitude coordinates.</p>",
      "summary": "<p>A geo value is a point on earth with latitude and longitude coordinates.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 63,
    "codeStart": 85,
    "code": "Field.prototype.addGeoValue = function(geo) {\n  if (util.is(geo, 'object')) {\n    geo = util.format('{latitude}, {longitude}', geo);\n  }\n\n  this.values.push({\n    geoValue: geo\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Field",
      "cons": "Field",
      "name": "addGeoValue",
      "string": "Field.prototype.addGeoValue()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} html - HTML value.\n",
        "name": "html",
        "description": "<ul>\n<li>HTML value. </li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var html = '<html><head><title>hello, world</title></head></html>';\nfield.addHtmlValue(html);",
        "html": "<p>var html = &#39;<html><head><title>hello, world</title></head></html>&#39;;<br />field.addHtmlValue(html);</p>"
      }
    ],
    "description": {
      "full": "<p>An HTML value is an HTML-formatted string. Text out of markup tags are<br />tokenized and markup tags are considered metadata.</p>",
      "summary": "<p>An HTML value is an HTML-formatted string. Text out of markup tags are<br />tokenized and markup tags are considered metadata.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 95,
    "codeStart": 105,
    "code": "Field.prototype.addHtmlValue = function(html) {\n  this.addTextValue(html, { format: 'HTML' });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Field",
      "cons": "Field",
      "name": "addHtmlValue",
      "string": "Field.prototype.addHtmlValue()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{number} number - Number value.\n",
        "name": "number",
        "description": "<ul>\n<li>Number value. </li>\n</ul>\n",
        "types": [
          "number"
        ],
        "typesDescription": "<code>number</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "field.addNumberValue(8);",
        "html": "<p>field.addNumberValue(8);</p>"
      }
    ],
    "description": {
      "full": "<p>A number value is a double precision floating point value.</p>",
      "summary": "<p>A number value is a double precision floating point value.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 109,
    "codeStart": 117,
    "code": "Field.prototype.addNumberValue = function(number) {\n  this.values.push({\n    numberValue: number\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Field",
      "cons": "Field",
      "name": "addNumberValue",
      "string": "Field.prototype.addNumberValue()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string} text - Text value.",
        "name": "text",
        "description": "<ul>\n<li>Text value.</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{object=} options - Configuration object.",
        "name": "options",
        "description": "<ul>\n<li>Configuration object.</li>\n</ul>\n",
        "types": [
          "object"
        ],
        "typesDescription": "<code>object</code>|<code>undefined</code>",
        "optional": true,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "param",
        "string": "{string} options.format - One of `ATOM`, `HTML`, or `TEXT`. (Default:\n    `TEXT`).\n",
        "name": "options.format",
        "description": "<ul>\n<li>One of <code>ATOM</code>, <code>HTML</code>, or <code>TEXT</code>. (Default:     <code>TEXT</code>).</li>\n</ul>\n",
        "types": [
          "string"
        ],
        "typesDescription": "<code>string</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "field.addTextValue('Hello!');",
        "html": "<p>field.addTextValue(&#39;Hello!&#39;);</p>"
      }
    ],
    "description": {
      "full": "<p>A text value is a string that is tokenized as plain text.</p>",
      "summary": "<p>A text value is a string that is tokenized as plain text.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 123,
    "codeStart": 134,
    "code": "Field.prototype.addTextValue = function(text, options) {\n  options = options || {};\n  var format = options.format || 'TEXT';\n\n  this.values.push({\n    stringValue: text.toLowerCase(),\n    stringFormat: format.toUpperCase()\n  });\n};",
    "ctx": {
      "type": "method",
      "constructor": "Field",
      "cons": "Field",
      "name": "addTextValue",
      "string": "Field.prototype.addTextValue()"
    }
  },
  {
    "tags": [
      {
        "type": "param",
        "string": "{string|date} timestamp - Timestamp value.\n",
        "name": "timestamp",
        "description": "<ul>\n<li>Timestamp value. </li>\n</ul>\n",
        "types": [
          "string",
          "date"
        ],
        "typesDescription": "<code>string</code>|<code>date</code>",
        "optional": false,
        "nullable": false,
        "nonNullable": false,
        "variable": false
      },
      {
        "type": "example",
        "string": "var timestamp = '2014-08-18T21:19:55.000Z';\nfield.addTimestampValue(timestamp);\n\n//-\n// Use a Date object.\n//-\nvar now = Date.now();\nfield.addTimestampValue(now);",
        "html": "<p>var timestamp = &#39;2014-08-18T21:19:55.000Z&#39;;<br />field.addTimestampValue(timestamp);</p><p>//-<br />// Use a Date object.<br />//-<br />var now = Date.now();<br />field.addTimestampValue(now);</p>"
      }
    ],
    "description": {
      "full": "<p>A timestamp value is a date-time value with millisecond precision.</p>",
      "summary": "<p>A timestamp value is a date-time value with millisecond precision.</p>",
      "body": ""
    },
    "isPrivate": false,
    "isConstructor": false,
    "isClass": false,
    "isEvent": false,
    "ignore": false,
    "line": 144,
    "codeStart": 159,
    "code": "Field.prototype.addTimestampValue = function(timestamp) {\n  if (timestamp instanceof Date) {\n    timestamp = timestamp.toJSON();\n  }\n\n  this.values.push({\n    timestampValue: timestamp\n  });\n};\n\nmodule.exports = Field;",
    "ctx": {
      "type": "method",
      "constructor": "Field",
      "cons": "Field",
      "name": "addTimestampValue",
      "string": "Field.prototype.addTimestampValue()"
    }
  }
]